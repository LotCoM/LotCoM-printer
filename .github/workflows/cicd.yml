name: .NET CI/CD

on:
  push:
    branches: main
    tags:
      - '*.*.*'
      - '*.*.*.*'

permissions:
  contents: write

env:
  DOTNET_VERSION: '9.0.103' # The .NET SDK version to use
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages # action runner's installed NuGet packages
  SIGNING_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE_BASE64 }}
  SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}

jobs:

  build:

    name: build-windows
    if: ${{ github.event_name }} == 'pull_request' && ${{ github.event.action }} == 'closed' && ${{ github.event.pull_request.merged }} == true
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4.3.0
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: "./LotCoMPrinter/packages.lock.json"
    - name: Install dependencies
      run: dotnet restore
    
    - name: Install MAUI 
      run: dotnet workload install maui-windows
      
    - name: Build
      run: dotnet publish -f net9.0-windows10.0.19041.0 -c Release -p:RuntimeIdentifierOverride=win10-x64 -p:WindowsPackageType=MSIX -p:WindowsAppSDKSelfContained=true

    - name: Copy MSIX to known path
      shell: pwsh
      run: |
        # find the MSIX package
        $msix = Get-ChildItem -Path "D:\a\LotCoM-printer\LotCoM-printer\LotCoMPrinter\bin\Release\net9.0-windows10.0.19041.0\win10-x64" -Filter *.msix -Recurse -ErrorAction SilentlyContinue

        # copy the MSIX to a set path
        New-Item -ItemType directory -Path "D:\a\Package" -ErrorAction SilentlyContinue
        Copy-Item -Path $msix -Destination D:\a\Package

    - name: Archive build package (MSIX) artifact
      uses: actions/upload-artifact@v4
      with:
        name: latest-windows-package
        path: |
          D:\a\Package
          
  sign:

    name: sign-msix
    needs: build
    runs-on: windows-2022

    steps:
    - name: Download MSIX package
      uses: actions/download-artifact@v4
      with:
        name: latest-windows-package
        path: |
          D:\a\Package
        
    - name: Sign MSIX with certificate
      shell: pwsh
      run: |
        # Save MSIX directory
        $msix = Get-ChildItem -Path "D:\a\Package" -Filter *.msix -Recurse -ErrorAction SilentlyContinue

        # Save certificate directories (encoded and decoded)
        $pfxEnc = "D:\a\Certificate\signing-certificate.txt"
        $pfx = "D:\a\Certificate\signing-certificate.pfx"

        # Save certificate password and encoded data
        $password = "$env:SIGNING_CERTIFICATE_PASSWORD"
        $certificate = "$env:SIGNING_CERTIFICATE_BASE64"
        
        # Decode the Base64 Certificate
        New-Item -ItemType directory -Path "D:\a\Certificate" -ErrorAction SilentlyContinue
        Set-Content -Path $pfxEnc -Value $certificate
        certutil -decode $pfxEnc $pfx

        # Install the PFX certificate to the Local Machine's Trusted Root CA store
        $securePassword = ConvertTo-SecureString -String $password -Force -AsPlainText
        Import-PfxCertificate -FilePath $pfx -CertStoreLocation "Cert:\LocalMachine\Root" -Password $securePassword
        
        # Sign the MSIX Package using SignTools
        Set-Location "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86"
        .\signtool.exe sign /fd SHA256 /a /f $pfx /t "http://timestamp.digicert.com" /p $password $msix

    - name: Archive signed MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: latest-windows-signed
        path: |
          D:\a\Package

  release:
  
    name: Auto-Release pushed tag
    needs: sign
    runs-on: windows-2022
    
    steps:
      - uses: actions/checkout@v3
      - name: Retrieve PR
        id: merged-pr-info
        uses: coin-tracker/get-merged-pull-request@v1.1
        with: 
          github_token: ${{ secrets.PAT_1 }}

      - name: Download MSIX package
        uses: actions/download-artifact@v4
        with:
          name: latest-windows-package
          path: |
            D:\a\Package

      - name: Copy MSIX to known path
        shell: pwsh
        run: |
          # find the MSIX package
          $msix = Get-ChildItem -Path "D:\a\Package" -Filter *.msix -Recurse -ErrorAction SilentlyContinue

          # copy the MSIX to a set path
          New-Item -ItemType directory -Path "D:\a\Package" -ErrorAction SilentlyContinue
          Copy-Item -Path $msix -Destination D:\a\Package -ErrorAction SilentlyContinue
          
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_1 }}
          tag: ${{ steps.merged-pr-info.outputs.title }}
        shell: pwsh
        run: |
          # save the tag from env
          $tag = "$env:tag"
          # create a new release notes file
          New-Item -ItemType file -Path "D:\a\Package\release_notes.md" -ErrorAction SilentlyContinue
          # mark that the release was auto-generated
          # Out-File -FilePath "D:\a\Package\release_notes.md" -InputObject "## What's Changed in `${tag}`"
          # Out-File -FilePath "D:\a\Package\release_notes.md" -Append -InputObject "**This release was generated automatically. It may not be complete or accurate.**"
          # create the release
          gh release create "$tag" --repo="$GITHUB_REPOSITORY" --title="$tag" \
          # edit the release notes to use the release notes file
          # gh release edit "$tag" --notes-file "D:\a\Package\release_notes.md"
      
      - name: Upload MSIX to release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_1 }}
        shell: pwsh
        run: |
          $msix = Get-ChildItem -Path "D:\a\Package" -Filter *.msix -Recurse -ErrorAction SilentlyContinue
          gh release upload ${{ steps.merged-pr-info.outputs.title }} $msix

