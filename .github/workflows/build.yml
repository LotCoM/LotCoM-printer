name: .NET CI

on:
  push:
  pull_request:
    branches: [ main ]
    paths:
    - '**.cs'
    - '**.csproj'

env:
  DOTNET_VERSION: '9.0.103' # The .NET SDK version to use
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages # action runner's installed NuGet packages
  SIGNING_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE_BASE64 }}
  SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_BASE64 }}

jobs:

  build:

    name: build-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4.3.0
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: "./LotCoMPrinter/packages.lock.json"
    - name: Install dependencies
      run: dotnet restore
    
    - name: Install MAUI 
      run: dotnet workload install maui
      
    - name: Build
      run: dotnet publish -f net9.0-windows10.0.19041.0 -c Release -p:RuntimeIdentifierOverride=win10-x64 -p:WindowsPackageType=MSIX -p:WindowsAppSDKSelfContained=true

    - name: Archive build package (MSIX) artifact
      uses: actions/upload-artifact@v4
      with:
        name: latest-${{ matrix.os }}-package
        path: |
          D:\a\LotCoM-printer\LotCoM-printer\LotCoMPrinter\bin\Release\net9.0-windows10.0.19041.0\win10-x64\AppPackages\**\*.msix
          
  sign:

    name: sign-msix
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]

    steps:
    - name: Download MSIX package
      uses: actions/download-artifact@v4
      with:
        name: latest-${{ matrix.os }}-package
        
        
    - name: Sign MSIX with Certificate
      shell: pwsh
      run: |
        # Decode the Base64 Certificate
        $certificateBase64 = "$Env:SIGNING_CERTIFICATE_BASE64"
        $certificatePassword = "$Env:SIGNING_CERTIFICATE_PASSWORD"
        $certificateData = [System.Convert]::FromBase64String($certificateBase64)
        $certificate = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($certificateData, $certificatePassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable) 
        
        # export the PFX bytes to a new file
        $pfx = $certificate.Export(3)
        New-Item -Path ".\signing-certificate.pfx" -ItemType File -Value $pfx

        # Save the directory of the MSIX file
        $msix = D:\a\LotCoM-printer\LotCoM-printer\LotCoMPrinter\bin\Release\net9.0-windows10.0.19041.0\win10-x64\AppPackages\**\*.msix

        # Sign the MSIX Package using SignTools
        cd "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x86"
        .\signtool.exe sign /fd SHA256 /a /f .\signing-certificate.pfx /t "http://timestamp.digicert.com" /p $password $msix

    - name: Archive signed MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: latest-${{matrix.os}}-signed
        path: |
          D:\a\LotCoM-printer\LotCoM-printer\LotCoMPrinter\bin\Release\net9.0-windows10.0.19041.0\win10-x64\AppPackages\**\*.msix
